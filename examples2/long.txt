record BufferedReader begin
  text: String;
  index: Int;
  line: String;
  finished: Bool
end

func buffered(text: String): BufferedReader begin
  BufferedReader {
    text=text,
    index=0,
    line="",
    finished=false
  }
end

func nextLine(reader: BufferedReader): BufferedReader begin
  if reader.finished || reader.index >= length(reader.text) then
    BufferedReader {
      text="",
      index=0,
      line=reader.text,
      finished=true
    }
  else
    if charAt(reader.text, reader.index) == "\n" then
      let before: String = substring(reader.text, 0, reader.index) in
      let after: String = substring(reader.text, reader.index + 1, length(reader.text)) in
      BufferedReader {
        text=after,
        index=0,
        line=before,
        finished=false
      }
    else
      let new_reader: BufferedReader = BufferedReader {
        text=reader.text,
        index=reader.index+1,
        line=reader.line,
        finished=false
      } in
      nextLine(new_reader)
    end
  end
end

func parseDigit(text: String): Int begin
  promise digit, initDigit: Int in
  initDigit <- -1;
  for guess = 0 to 9 begin
    if charAt(text, 0) == intToString(guess) then
      digit <~ guess
    else
      ()
    end
  end;
  ?digit
end

func parseInt(text: String): Int begin
  if length(text) == 0 then
    0
  else
    if charAt(text, 0) == "-" then
      0 - parseInt(substring(text, 1, length(text)))
    else
      promise num, initNum: Int in
      initNum <- 0;
      for i = 0 to length(text) begin
        num <~ ?num * 10;
        let currentDigitText: String = charAt(text, i) in
        let currentDigitValue: Int = parseDigit(currentDigitText) in
        if currentDigitValue == -1 then
          num <~ 0 -- Reset if we bumped into a parse error
        else
          num <~ ?num + currentDigitValue
        end
      end;
      ?num
    end
  end
end

func readAsync(file: String): Promise(String) begin
  promise getText, setText: String in
  async setText <- readFile(file);
  getText
end

func printLines(file: String): Unit begin
  promise reader, initReader: BufferedReader in
  initReader <- buffered(?readAsync(file));
  while !(?reader).finished begin
    reader <~ nextLine(?reader);
    println((?reader).line)
  end
end

func pow(num: Int, exp: Int): Int begin
  if exp < 0 then
    0
  else
    if exp == 0 then
      1
    else
      if exp == 1 then
        num
      else
        num * pow(num, exp - 1)
      end
    end
  end
end

func square(num: Int): Int begin
  pow(num, 2)
end

func cube(num: Int): Int begin
  pow(num, 3)
end

func max(a: Int, b: Int): Int begin
  if a >= b then
    a
  else
    b
  end
end

func min(a: Int, b: Int): Int begin
  if a <= b then
    a
  else
    b
  end
end

func main(): Unit begin
  printLines("Long.java");
  for i = min(square(3), cube(2)) to max(square(3), cube(2)) begin
    println(concat("On iteration: ", intToString(i)))
  end
end
